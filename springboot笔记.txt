@Conditional注解，条件装配，当满足一定条件时，注册组件，可用于@Bean方法上，当满足条件时，该Bean才会被注册
，也可以用于类上，当满足条件时，类中的组件才会被注册，如果不满足，那么类中的组件都不会被注册。

@ConfigurationProperties注解，配置绑定，就是把配置文件中的值与Bean的属性值绑定，就是一个赋值的过程

springboot启动时会扫描autoconfiguration包下面的spring.factories文件里的127个组件，但是并不是全部注册到ioc容器中，
而是通过条件装配注解@Conditional注解实现按需配置，满足条件才注册到ioc容器中。

springboot自动配置原理： XXXautoconfiguration  -》@Conditional  -》 XXXproperties  -》application.properties

查看自动配置了哪些组件：application.properties文件中开启debug，debug=true开启自动配置报告，nagative代表不生效，positive生效。

lombok还可以使用@slf4j注解来实现日志，log.info("msg")可以打印日志“msg”。

如果resources资源发生了变化，那么crtl+f9重新build项目即可，无需重新启动springboot。

给类的属性注入值，可以采用yml配置文件绑定值，如果想开启配置提示功能，引入依赖，并配置项目打包时不要把配置提示的jar包导进去。
详情见项目springboot-01

通过项目根路径就能访问到的静态资源，例如static文件夹下的pig.jpg,只需localhost://8080/pig.jpg就能访问。
如果想要改变静态资源的访问路径，那么在yml里配置即可，spring:mvc:static-path-pattern: /lang/** 。
常用参数注解的使用：@PathVariable，获取路径参数
                                  @RequestHeader，获取请求头信息
                                  @RequestParam，获取请求参数
                                  @CookieValue，获取cookie值
                                  @RequestBody ，获取post请求体（表单信息）的值
                                  @RequestAttribute，获取request域属性的值
                                  @MatrixVariable，获取矩阵变量的值，带有矩阵变量的url：http://localhost:8080/lang/1;bossage=20/2;empage=18,
               对应的controller处理的映射为：/lang/{bossID}/{empID},花括号中前一部分为参数，后一部分为矩阵变量，
    springboot默认关闭矩阵变量功能，如果需要，自己可以通过实现接口或者注册Bean来开启该功能。

thymeleaf的行内写法：[[${userName}]]

掌握thymeleaf的${}取值，[[${}]]行内写法，相同语句块的抽取与引用，th:fragment，以及使用th:each遍历。（见项目boot-web-01)

文件上传：MultipartFile类，自动封装上传过来的文件，即controller处理请求时获取该文件的参数写法为：@RequestPart（" name"）MultipartFile file,
如果是多文件，那么@RequestPart（" name"）MultipartFile[] files,拿到该文件，将其存储到硬盘的方法为：file.transferTo(new File( "D:\\name"));

springboot异常页面定制，只需要在templates文件夹下新建文件夹error，文件名5XX.html会用来对应错误码5开头的错误请求，404对应404错误，也可以在5XX.html
里面通过${message}以及${trace}打印详细异常信息。

springboot使用原生web的servlet，filter，listener，两步，第一步加上@WebXXX注解，如@WebServlet，第二步，在启动类上添加
@ServletComponentScan("com.atguigu.servlet")来扫描该注解。注意到servlet的请求没有被springboot自定义的拦截器拦截。

springboot使用RegistrationBean来实现servlet，filter，listener，在配置类里面注入相关类型的Bean即可，如servlet，就注入
ServletRegistrationBean类型的Bean。










